<template>
  <div class="hello">
    <div class="div-startbuttom" v-if="playernow" @click="playVideo">

    </div>
    <video @play="onPlayerPlay($event)" @pause="onPlayerPause($event)" id="my-video"
           class="video-js vjs-big-play-centered" x5-video-player-fullscreen="true"
           :playsinline="living" :webkit-playsinline="living" x-webkit-airplay="true" x5-video-player-type="h5"
           x5-video-orientation="h5">

    </video>
    <chat-editor class="ed"
                 v-show="liveData.LiveStreamStateId != 2"
                 @confirmCharge="showMsg"
                 @hideEditor="hideEditor"
                 @toggle-input="toggleEditor"
                 type="chatroom"
                 :chatroomId="chatroomId"
                 :liveId="liveData.Id"
    ></chat-editor>
    <div class="studio-nav">
      <div class="studio-img">
        <img :src="CustomerAvatarUrl" alt="" class="studioavater">
      </div>
      <div class="studio-details">
        <h3>{{this.studioInfo.Name}}</h3>
        <div class="studionumber">
          <img src="../assets/follow.png" alt="" class="studioavater">
          <span class="likecount">{{this.FollowCount}}</span>
          <img src="../assets/online.png" alt="" class="studioavater" v-show="liveData.LiveStreamStateId != 2">
          <span class="likecount" v-show="liveData.LiveStreamStateId != 2">{{this.LookCount}}</span>
        </div>
      </div>
      <div class="attention" @click="attention" v-if="isattion">
        <a class="attention-button">关注</a>
      </div>
    </div>

    <div @click="playVideo" v-show="liveData.LiveStreamStateId != 2">
      <ChatList v-show="showChatMsgs" class="chat-list" type="chatroom" :chatroomId="chatroomId" :msglist="msglist"
                @msgs-loaded="msgsLoaded"></ChatList>
    </div>

    <ModalPoirt ref="ModalPoirt">
    </ModalPoirt>
    <Modal ref="Modal" :text="text" confirmTitle="确定" cancleTitle="取消" confirmVisible="visible"
           v-on:confirmClick="confirm()" v-on:cancleClick="cancel()"></Modal>
  </div>
</template>

<script>
  import ChatList from './ChatList'
  import ChatEditor from './ChatEditor'
  import pageUtil from '../utils/page'
  import {setStore, getStore} from '../store/mlocalstorge';
  import Modal from '@/components/modal/Modal';
  import ModalPoirt from '@/components/modal/ModalPoirt';
  import {Toast, MessageBox} from 'mint-ui';

  export default {
    components: {
      ChatList, ChatEditor, Modal, ModalPoirt
    },
    data() {
      return {
        text: "",
        mChatroomId: "",
        msg: 'Welcome to Your Vue.js App',
        hlsPullUrl: "",
        CustomerAvatarUrl: "",
        FollowCount: "",
        LookCount: "0",
        studioInfo: {},
        myPlayer: null,
        liveData: {LiveStreamStateId: 0},
        payInfo: {},
        isShowEditView: true,
        ScoreSetting: 1,
        userInfo: {},
        screenWidth: document.body.clientWidth,
        proit: false,
        playernow: true,
        isattion: false,
        living: true,
        timeInterval: '',
        showChatMsgs: true,
        connectTimeInterval: '',
      }
    },
    beforeDestroy() {
      this.myPlayer.release();
      this.$store.dispatch("logout");
      this.$store.commit("updateNim")
      clearInterval(this.timeInterval);
      this.$store.dispatch("resetChatroomSDK", null);
    },
    mounted() {
      this.userInfo = getStore("userInfo");
      this.initPlayer();

      //屏幕调整
      let that = this;
      window.onresize = () => {
        window.screenWidth = document.body.clientWidth
        that.screenWidth = window.screenWidth
      }
      //处理观众人数
      this.customerCount();

      window.onbeforeload = () => {
          alert(123);
      }
    },
    updated() {},
    computed: {
      chatroomId() {
        let chatroomId = this.$store.state.chatroomID
        return chatroomId
      },
      msglist() {
        let msgs = [];
        let tempmsg = this.$store.state.currChatroomMsgs
        for (let i = 0; i < tempmsg.length; i++) {

          if (tempmsg[i].type === "text") {
            msgs.push(tempmsg[i])
          }

        }
        return msgs
      },
      liveStreamId() {
        return this.$route.params.liveStreamId;
      },
    },
    watch: {
      screenWidth(val) {
        if (!this.timer) {
          this.screenWidth = val
          this.timer = true
          let that = this

          if (window.orientation == 180 || window.orientation == 0) {
            this.$refs.ModalPoirt.close();
          }
          if (window.orientation == 90 || window.orientation == -90) {
            this.$refs.ModalPoirt.open();
          }
          setTimeout(function () {
            this.text = that.screenWidth,
              that.timer = false
          }, 0)
        }
      },
    },
    methods: {
      //显示观众人数, 及设定定时器,更新人数
      customerCount() {
        //显示观众人数
        this.api.getLiveStreamCustomerCount({Id: this.liveStreamId}).then(res => {
          this.LookCount = res.Data;
        })
        //每10秒更新观众人数
        this.timeInterval = setInterval(() => {
          this.api.getLiveStreamCustomerCount({Id: this.liveStreamId}).then(res => {
            this.LookCount = res.Data;
          })
        }, 10000);
      },
      initPlayer() {
        //手机系统
        let u = navigator.userAgent, app = navigator.appVersion;
        //let isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //g
        let isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
        if (isIOS) {
          this.playernow = false;
        }

        let myPlayer = neplayer('my-video', {
          "width": window.screen.availWidth,
          "height": window.screen.availHeight,
          "controls": true,
          errorDisplay: false,
        });
        this.myPlayer = myPlayer;

        this.api.getLiveStreamById({Id: this.liveStreamId}).then(res => {
          let data = res.Data;
          this.liveData = data;
          if (data.LiveStreamStateId == 0) {
            alert("直播尚未开始")
            this.$router.go(-1);
            return
          }
          this.studioInfo = data.WorkRoom;
          this.hlsPullUrl = data.HlsPullUrl;
          this.mChatroomId = data.WorkRoom.NetEaseRoomId;
          if (this.studioInfo) {
            this.CustomerAvatarUrl = data.WorkRoom.Picture.Url;
          }
          this.isattion = !this.studioInfo.IsFollowed
          if (data.WorkRoom != undefined && this.userInfo.UserId == data.WorkRoom.CreateCustomerId) {
            this.isattion = false;
          }
          //如果直播已经结束, 直接播放历史视频
          if (data.LiveStreamStateId == 2) {
            this.hlsPullUrl = data.NetEaseUrl;
          } else {
            //更新直播观众数
            this.api.updateLiveStreamCustomer({
              LiveStreamVideoId: this.liveStreamId,
              CustomerId: this.userInfo.UserId,
              IsSpeak: false,
              ClientTypeId: 3,
            });
          }
          this.$store.dispatch("updateChatroomAvatar", this.CustomerAvatarUrl);
          this.FollowCount = data.WorkRoom.FollowCount;
          this.playLive(this.hlsPullUrl);

          document.title = data.Title;
          //初始化播放器相关之后, 处理聊天室相关.
          if (this.userInfo && this.userInfo.YunXinUserName && this.userInfo.YunXinToken) {
            this.initSdk();
            this.$store.dispatch("getChatroomInfo");
          }
        });
      },
      onPlayerPlay(player) {
        let u = navigator.userAgent, app = navigator.appVersion;
        let isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //g
        let isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
        if (isAndroid) {
          this.playernow = false;
        }
        if (isIOS) {
          this.playernow = false;
        }
        this.playernow = false;
      },
      onPlayerPause(player) {
        let u = navigator.userAgent, app = navigator.appVersion;
        let isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //g
        let isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
        if (isAndroid) {
          this.playernow = true;
        }
        if (isIOS) {
          this.playernow = false;
        }
      },
      confirm() {
        if (this.text == "直播已恢复!") {
          this.playVideo();
        } else {
          this.$router.go(-1);
        }

      },
      cancel() {

      },
      cancleClick() {

      },
      hideEditor() {

      },
      toggleEditor(newValue) {
        this.showChatMsgs = !newValue;
      },
      attention() {

        let params = {
          "UserID": this.userInfo.UserId,
          "WorkRoomId": this.studioInfo.Id,
          "IsFollow": !this.studioInfo.IsFollowed,
        }
        this.api.FollowWorkRoom(params).then(res => {
          Toast("关注成功");
          this.isattion = false;
          this.FollowCount++;

          let content = {
            "id": this.liveData.WorkRoom.CreateCustomerId,
            "type": 4
          }
          const chatroom = this.$store.state.currChatroom
          chatroom.sendCustomMsg({
            content: JSON.stringify(content),
          });

          const mId = this.$route.params.liveStreamId;
          const params = {
            "Id": mId
          };

          this.api.getLiveStreamById(params).then(res => {
            let data = res.Data;
            this.FollowCount = data.WorkRoom.FollowCount;
          });

        }, error => {
          Toast("关注失败");
        })
      },
      playVideo() {
        this.myPlayer.play();
      },
      msgsLoaded() {
        pageUtil.scrollChatListDown()
      },
      showMsg() {
        if ((this.liveData.ExpenseModeId == 1 || this.liveData.ExpenseModeId == 2) && this.liveData.SpeakExpense > 0) {
          MessageBox.confirm('提问需要付费' + this.liveData.SpeakExpense + '元, 确定支付?').then(action => {
            var params = {
              changeTypeId: '2305',
              paymentTypeId: '902',
              amount: this.liveData.SpeakExpense,
              reforToTypeId: '0',
              referToId: this.liveData.Id,
              funcName: 'liveVideo',
              liveId: this.liveData.Id
            }
            this.$router.push({name: '直接支付', query: params});
          });
        } else {
          return true;
        }
      },
      open() {
        var u = window.navigator.userAgent;
        var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //android终端或者uc浏览器
        var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);
        if (isAndroid) {
          window.setTimeout(function () {
            window.location.href = "http://a.app.qq.com/o/simple.jsp?pkgname=com.yipong.app";
            /***Android移动端下载地址***/
          }, 200);

        }
        if (isiOS) {
          window.setTimeout(function () {
            window.location.href = "https://itunes.apple.com/us/app/yi-bang-wang/id1052452628?l=zh&ls=1&mt=8";
            /***下载app的地址***/
          }, 200);

        }
      },
      initSdk() {
        this.$store.state.userUID = this.userInfo.YunXinUserName;
        this.$store.state.sdktoken = this.userInfo.YunXinToken;
        this.$store.state.myInfo = {
          uid: this.userInfo.YunXinUserName,
          sdktoken: this.userInfo.YunXinToken,
          nick: this.userInfo.Nickname,
          avatar: this.userInfo.UserHeaderImageUrl
        };
        //初始化nim, Nim可以不断初始化, 如果已经初始化, 返回的为同一份实例.
        //同时在初始化聊天室时, 更新用户资料.
        this.$store.dispatch('connect', this.$store.state.myInfo);
        this.connectTimeInterval = setInterval(() => {
          if (this.$store.state.hasConnected) {
            clearInterval(this.connectTimeInterval);
            //当初始化链接在建立以后, 再链接聊天室.
            this.$store.dispatch('setChatroomId', {chatroomId: this.mChatroomId});
            this.$store.dispatch('connect', {type: "chatroom", chatroomId: this.mChatroomId});
          }
        }, 1000)
      },
      playLive(url) {
        var lowUrl = url.toLowerCase();
        var urlType = lowUrl.substring(0, 4);
        var type;
        if (url === '') {
          alert('无效播放地址');
          return;
        }
        switch (urlType) {
          case 'http':
            if (lowUrl.indexOf('mp4') !== -1) {
              type = 'video/mp4';
            } else if (lowUrl.indexOf('flv') !== -1) {
              type = 'video/x-flv';
            } else if (lowUrl.indexOf('m3u8') !== -1) {
              type = 'application/x-mpegURL';
            }
            break;
          case 'rtmp':
            type = 'rtmp/flv';
            break;
        }
        ;

        this.myPlayer.onError(function (error) {

        });
        //在安卓播放直播时, 无法评论, 必须写成 video/mp4
        this.myPlayer.setDataSource({type: 'video/mp4', src: url});
//        this.myPlayer.setDataSource({type: type, src: url});
      },
    }
  }
</script>

<style scoped>
  h3 {
    margin: 0;
    padding: 0;
  }

  .div-startbuttom {
    margin-top: 20%;
    width: 100%;
    height: 60%;
    position: absolute;
    z-index: 100;
    display: flex;
    justify-content: center;
    align-content: center;
    align-items: center;
    align-self: center;
  }

  .div-startbuttom img {
    width: 50px;
    height: 50px;
  }

  .hello {
    margin: 0;
    padding: 0;
    position: fixed;
    min-height: 100%;
  }

  .hello .studio-nav {
    position: fixed;
    background: rgba(0, 0, 0, .25);
    left: 8px;
    top: 8px;
    z-index: 9;
    padding-right: 10px;
    border-radius: 40px/40px;
    height: 40px;
  }

  .hello .studio-nav .studio-img {
    height: 40px;
    float: left;
    width: 40px;
    border-radius: 40px/40px;
  }

  .hello .studio-nav .studio-img img {
    height: 100%;
    width: 40px;
    border-radius: 40px/40px;
  }

  .hello .studio-nav .studio-details {
    float: left;
    line-height: 20px;
    margin-left: 10px;
  }

  .hello .studio-nav .attention {
    margin-left: 10px;
    float: left;
    line-height: 40px;
  }

  .hello .studio-nav .attention a {
    padding: 5px 8px;
    border-radius: 25px/25px;
    background-color: #FF9000;
    font-size: 1.4rem;
    color: white;
  }

  .hello .studio-nav .studio-details h3 {
    line-height: 20px;
    font-family: "宋体";
    margin-left: -5px;
    color: white;
    font-size: 1.3rem;
    max-width: 150px;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
  }

  .hello .studio-nav .studio-details .studionumber {
    text-align: left;
    color: white;
    font-size: 1.3rem;
  }

  .video-js {
    z-index: 1;
    object-fit: fill;
  }

  .bottom {
    position: fixed;
    left: 0px;
    bottom: 30px;
    z-index: 9;
    width: 100%;
    height: 30px;
    display: flex;
  }

  .bottom .ask {
    color: white;
    flex: 3;
    height: 30px;
    margin-left: 5px;
    background: rgba(0, 0, 0, .5);
    border-radius: 15px/15px;
    line-height: 30px;
    padding-right: 5px;
    position: relative;
  }

  .bottom .ask .ask-icon {
    position: absolute;
    left: 10px;
    width: 30px;
    height: 30px;
    background: url(../assets/ask.png) no-repeat left;
  }

  .bottom .ask .ask-text {
    float: right;
    margin-right: 20px;
  }

  .bottom .face {
    flex: 2;
    color: white;
    height: 30px;
    margin-left: 5px;
    background: rgba(0, 0, 0, .5);
    border-radius: 15px/15px;
    padding-right: 5px;
    display: flex;
  }

  .bottom .face .face-icon {
    float: left;
    margin: 0 3px 0 auto;
    width: 30px;
    height: 30px;
    background: url(../assets/face.png) no-repeat left;
  }

  .bottom .face .face-text {
    margin: 0 auto 0 0;
    float: left;
    line-height: 30px;
  }

  .bottom .share {

    width: 30px;
    height: 30px;
    margin-left: 6px;
    background: rgba(0, 0, 0, .5);
    border-radius: 50%;
    line-height: 30px;
    padding-right: 5px;
  }

  .bottom .share .share-icon {
    float: left;
    width: 30px;
    height: 30px;
    background: url(../assets/share.png) no-repeat center;
  }

  .bottom .end {
    color: white;
    margin-left: 6px;
    margin-right: 10px;
    background: rgba(0, 0, 0, .5);
    border-radius: 30px/30px;
    line-height: 30px;
    padding-right: 5px;
    text-align: right;
  }

  .bottom .end .end-icon {
    float: left;
    width: 30px;
    height: 30px;
    background: url(../assets/btn_close.png) no-repeat center;
  }

  .chat-list {
    z-index: 100;
    position: fixed;
    left: 0px;
    bottom: 80px;
    width: 70%;
    height: 170px;
    overflow: hidden;
    overflow-y: scroll;
  }

  .ed {
    width: 100%;
  }
</style>
