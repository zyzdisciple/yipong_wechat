<template>
    <div class="liveyu-content">
        <div class="lis-tcontent">
        </div>
        <scroller  class="lis-tcontent" :on-refresh="refresh" :on-infinite="infinite" ref="my_scroller">
            <ul class="padding">
                <li :key="index" v-for="(item,index) in list">
                    <live-item class="item" :liveInfo="item" :index="index" :type="type" v-on:itemclick="itemclick"></live-item>
                </li>
            </ul>
        </scroller>
        <ModalLogin ref="ModalLogin" confirmTitle="确定" cancleTitle="取消" confirmVisible="visible"></ModalLogin>
        <Modal ref="ModalCharge" :text="text" confirmTitle="确定" cancleTitle="取消" confirmVisible="visible" v-on:confirmClick="confirmCharge" v-on:cancleClick="cancleClick"></Modal>
    </div>
</template>
<script scoped>
import LiveItem from '@/components/livelist/LiveItem';
import * as constant from '../../configs/constant';
import Modal from '@/components/modal/Modal';
import ModalLogin from '@/components/modal/ModalLogin';
import { Toast } from 'mint-ui';
import { getStore, removeStore } from '../../store/mlocalstorge';
import { getWXPayInfo } from '../../utils/WXPay';
export default {
    components: {
        LiveItem, Modal, ModalLogin
    },
    data() {
        return {
            list: Object,
            title: "",
            PageIndex: 1,
            PageSize: 20,
            type: constant.STATUS_LIVE_PRE,
            allLoaded: false,
            text: "",
            userInfo: {},
            ScoreSetting: 0,
            TotalPages: 0,
            loading: false,
            itemindex: -1,
            bottomStatus: "暂无数据，请稍后再试",
        }
    },
    props: {


    },
    mounted() {
        let userInfo = getStore("userInfo");
        let params = {
            "PageIndex": this.PageIndex,
            "PageSize": this.PageSize,
            "StatusId": this.type,
            "UserId": parseInt(this.$route.params.hostId),
            "OrderMode": 1,
            "Keywords": ""
        }

        this.api.getLiveStreams(params).then(res => {
            this.list = res.Data.Data;
            this.TotalPages = res.Data.TotalPages;
        });
    },
    methods: {

        refresh(done) {
            setTimeout(() => {
                this.PageIndex = 1;
                let userInfo = getStore("userInfo");
                let params = {
                    "PageIndex": this.PageIndex,
                    "PageSize": this.PageSize,
                    "StatusId": this.type,
                    "UserId": parseInt(this.$route.params.hostId),
                    "OrderMode": 1,
                    "Keywords": ""
                }
                this.api.getLiveStreams(params).then(res => {
                    this.list = res.Data.Data;
                    this.TotalPages = res.Data.TotalPages;
                    done();
                });
            }, 1500);
        },

        infinite(done) {
            this.loading = true,
                setTimeout(() => {
                    this.loading = false;
                    if (this.TotalPages < this.PageIndex) {
                        done(true);
                        return;
                    }
                    this.PageIndex++;
                    let params = {
                        "PageIndex": this.PageIndex,
                        "PageSize": this.PageSize,
                        "StatusId": this.type,
                        "UserId": parseInt(this.$route.params.hostId),
                        "OrderMode": 1,
                        "Keywords": ""
                    }
                    this.api.getLiveStreams(params).then(res => {
                        for (let i = 0; i < res.Data.Data.length; i++) {
                            this.list.push(res.Data.Data[i]);
                        }
                        this.TotalPages = res.Data.TotalPages;
                        done();
                    });

                }, 1500);
        },
        itemclick(itemindex) {
            this.itemindex = itemindex;
            this.userInfo = getStore("userInfo");
            // 判断是否需要报名
            if (this.list[itemindex].ApplyCount != 0 && this.list[itemindex].ApplyCount >= this.list[itemindex].MaxAudienceCount) {
                Toast("报名人数已经满了");
                return;
            }
            if (this.list[itemindex].IsApplyed) {
                Toast("已报名");
                return;
            }
            // 弹出提示窗口
            //查询积分保证登录
            let paramsApply = {
            }
            this.api.getMyPointsInfo(paramsApply).then(res => {
                if (res.Data == undefined) {
                    Toast("网络不好，请稍后");
                    return;
                }
                this.ScoreSetting =  res.Data.ScoreSetting;
                this.text = "该场直播需要" + this.list[itemindex].ApplyExpense / res.Data.ScoreSetting + "元报名，确定吗?";
                this.$refs.ModalCharge.open();
            }, error => {
                Toast("网络不好，请稍后");
            });
        },
        cancleClick() {
        },
        confirmCharge() {// 微信支付


            getWXPayInfo(this.list[this.itemindex].ApplyExpense * 100 / this.ScoreSetting, () => {
                //扣费
                let chargeParms = {
                    "ChangeTypeId": 821,
                    "ScoreAmount": this.list[this.itemindex].ApplyExpense,
                    "RefertoId": this.list[this.itemindex].Id,
                };
                this.api.getLiveScorePay(chargeParms).then(res => {

                    let payparams = {
                        "UserId": this.userInfo.UserId,
                        "LiveId": this.list[this.itemindex].Id,
                    }
                    this.api.getCustomerPayInfo(payparams).then(res => {
                        let payInfo = res.Data;
                        if (payInfo.IsPayApplyExpense) {
                            this.list[this.itemindex].IsApplyed = true;
                        }
                    });
                    // }
                });
            }, (fail) => {
                Toast("支付失败");
            })
        }
    },

}
</script>
<style scoped lang="scss" >
@import '../../common/mixin.scss';
@import '../../common/variable.scss';
.liveyu-content {
    overflow: hidden;
    width: 100%;
    height: 100%;
    .lis-tcontent {
        height: 100%;

        .pull {
            height: 100%;
        }

        .item {
            @include border-bottom-grey;
        }
        li:last-child {
            .item {
                border-bottom: none;
            }
        }
    }
    .padding {
         margin: 5px 0px;
    }
}
</style>
